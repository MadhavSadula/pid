import streamlit as st
from ..Requirements_scripts.utility import create_folder,extract_folders,split_folders_titles, Next_Orphan_foldername, extract_titles, save_userstories_for_feature
from ..Requirements_scripts.UserStory import UserStoryDataRet, recreateADOUserStoryDataRet
import os
import datetime
import sys
from ..Requirements_scripts.Analytics import Analytics
from .feedback import feedback_dialog
from ..Requirements_scripts.ChatCompletion import CreateChatbot
from .common_style import apply_default_button_styles

current_dir = os.path.dirname(os.path.abspath(__file__))
three_dirs_up = os.path.abspath(os.path.join(current_dir, "../../.."))
sys.path.insert(0, three_dirs_up)
from common_rag_utility import *
from ADO_scripts.Get_WorkItem import *
from bs4 import BeautifulSoup
import json

user_story_dict = {}
Feature_titles = []
us_save_button_key = 'us_save_button_clicked'

"""
    Load user stories based on the current session state and configuration.

    This function retrieves user stories from a specified project, team, and iteration. It logs the process 
    if logging is enabled for the current page. The user stories are returned in a dictionary format for easy 
    access and a list of titles for display purposes.

    Parameters:
        session_states (dict): A dictionary containing the current session's state and configuration, including 
                               organization name, selected project, team, iteration, and logger configuration.

    Returns:
        tuple: A dictionary of user stories where each key is the story title and the value is another dictionary 
               containing the story's ID, description, acceptance criteria, and demo information, and a list of 
               titles of the user stories.
"""
def load_user_stories(session_states):
    page_name = 'User Story'
    loggerConfig_object = session_states[LOGGERCONFIG_OBJECT]
    page = session_states[CURRENT_UI_PAGE]
    
    #Verifying page log flag is enabled or not
    if verify_log_variable(page, loggerConfig_object):
        # log_writer(session_states['log_file_descriptor'], page, "save_settings function started")
        logger.info(f"{page} load_user_stories function Started")

    try:
        # Retrieve the list of user stories from the specified organization, project, team, and iteration
        user_stories_list = get_user_stories(session_states[CONST_ENTER_ORG_NAME], session_states[CONST_SEL_PROJECT],
                                             session_states[CONST_SEL_STEAM], session_states[CONST_SEL_SITERATION], page_name, session_states)
        # Check if the retrieved user stories are in list format
        if isinstance(user_stories_list, list):
            FT = []    
            user_story_dict = {}
            for story in user_stories_list:
                sList = str(story['ID']) + '~' + story['Title']
                FT.append(sList)
                user_story_dict[story['ID']] = {
                    "Description": story['Description'],
                    "AcceptanceCriteria": story['AcceptanceCriteria'],
                    "Howtodemo": story['Howtodemo'],
                    "AdditionalInfo": story['AdditionalInfo']
                }
            if verify_log_variable(page, loggerConfig_object):
                # log_writer(session_states['log_file_descriptor'], page, "save_settings function started")
                logger.info(f"{page} load_user_stories function Ended")
            return user_story_dict, FT
        else:
            # Handle the case where the return value is not a list
            return {}, []  # or return an error message depending on your design    
    except KeyError as e:
        st.toast(f"Key error: {e}. Please check the session state keys.")
        if verify_log_variable(page, loggerConfig_object):
            logger.error(f"{page} Key error: {e}. Please check the session state keys.")
        return {}, []  # Return empty structures on error    
    except TypeError as type_err:
        if verify_log_variable(page, loggerConfig_object):
            logger.error(f"{page} Type error occurred: {type_err}")
        st.toast(f"Type error occurred: {type_err}")
        return {}, []    
    except Exception as e:
        if verify_log_variable(page, loggerConfig_object):
            logger.error(f"{page} An error occurred while loading user stories: {e}")
        st.toast(f"An error occurred while loading user stories: {e}")
        return {}, []  # Return empty structures on error

#Create a text area with a toggle button to enable/disable it and store its value in session states.
def create_text_area(label, value, toggle_button):    
    # Create a toggle button to enable or disable the text area
    #toggle_button = st.checkbox(f"{label}:", value=True)  # Default to enabled
    
    if f"{label}_value" not in st.session_state:
        st.session_state[f"{label}_value"] = value
    if st.session_state["curr_workitem_ID"] != st.session_state["prev_workitem_ID"]:
        del st.session_state[f"{label}_value"]
        del st.session_state[f"Recreate_{label}"]
        st.session_state[f"{label}_value"] = value
        #Description_value, Acceptance_Criteria_value, How_to_Demo_value, Additional_Information_value

    # Create the text area; enable or disable based on the toggle button
    text_area_value = st.text_area(
        label=label+" (AI-Generated Content)",
        key=f"{label}_text_area",
        #label_visibility="hidden",
        height=150,
        value=st.session_state[f"{label}_value"],
        disabled=not toggle_button  # Disable if toggle is off
    )
    st.session_state[f"{label}_value"] = text_area_value
    return text_area_value, toggle_button

#Function to save the response
def finalize_data(page,foldername,data,option,session_states):
    page = session_states[CURRENT_UI_PAGE]
    LoggerObject = session_states[LOGGERCONFIG_OBJECT]
    if verify_log_variable(page, LoggerObject):
        # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
        logger.info(f"{page} finalize_data function Started")

    try:
        destination_path = session_states[CONST_USERSTORY_FINALIZED_PATH]
        path = create_folder(destination_path,foldername,page,data,session_states)
        #Declaring session state flag for the radio selected to one
        session_states[option]=1
        if verify_log_variable(page, LoggerObject):
            # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
            logger.info(f"{page} finalize_data function Ended")
    except Exception as e:
        error_msg = handle_exception(e)
        st.toast(error_msg)
        if verify_log_variable(page, LoggerObject):
            # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
            logger.error(f"{page} {error_msg}")

#Declaring session state flags for every radio in the list to zero.
def radio_change(radios,session_states):
    for radio in radios:
        if(radio not in session_states):
            session_states[radio]=0

#Function to create and recreate the response
def create_response(UserStory_title, Feature_title,session_states,recreate_flag):
    page = session_states[CURRENT_UI_PAGE]
    LoggerObject = session_states[LOGGERCONFIG_OBJECT]
    if verify_log_variable(page, LoggerObject):
        # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
        logger.info(f"{page} create_response function Started")
    try:
        temperature=session_states[CONST_TEMPERATURE]
        prompt=session_states[CONST_USERSTORY_USER_TEXT]
        template1 = template = session_states[CONST_USERSTORY_USER_TEMPLATE]
        example=session_states[CONST_USERSTORY_USER_EXAMPLE]
        #Disabling ADO button according to selected template
        # if(template == '' or template == 'None') and (example=='' or example=='None'):
        #     # session_states["Push_to_ADO_flag"] = True
        #     session_states[session_states[CONST_USERSTORY_OPTION]+'_push_to_ADO'] = True
        # else:
        #     # session_states["Push_to_ADO_flag"] = False
        #     session_states[session_states[CONST_USERSTORY_OPTION]+'_push_to_ADO'] = False
        if(template == '' or template == 'None'):
            template=session_states[CONST_PROMPT_DICTIONARY][CONST_USERSTORY_DEFAULT_TEMPLATE]
       
        #For orphan creation, when orphan artifact is recreated, we are using default prompt because we have title. 
        if(Feature_title =='Create new User Story'): 
            if prompt=='' or prompt=='None':
                if UserStory_title == '':
                    dictionary_prompt = session_states[CONST_PROMPT_DICTIONARY][CONST_USERSTORY_CNP_WITHOUT_USER_INPUT]
                else:
                    dictionary_prompt = session_states[CONST_PROMPT_DICTIONARY][CONST_USERSTORY_DEFAULT_PROMPT]
            else:
                if UserStory_title == '':
                    dictionary_prompt = session_states[CONST_PROMPT_DICTIONARY][CONST_USERSTORY_CREATE_NEW_PROMPT]
                else:
                    dictionary_prompt = session_states[CONST_PROMPT_DICTIONARY][CONST_USERSTORY_DEFAULT_PROMPT]

            response = UserStoryDataRet(prompt,template,example,
                                    session_states[CONST_DEFAULT_FOLDER],'',UserStory_title, session_states[CONST_CONTENT],
                                    dictionary_prompt, session_states,recreate_flag, temperature)
            if response[1]!='':
                # We are extracting feature title from the feature output document to const feature option
                session_states[CONST_USERSTORY_OPTION] = extract_titles(response[1],session_states,0)[0]
            else:
                session_states[CONST_USERSTORY_OPTION] = ""
            #Disabling ADO button according to selected template
            if(template1 == '' or template1 == 'None') and (example=='' or example=='None'):
                session_states[session_states[CONST_USERSTORY_OPTION]+'_push_to_ADO'] = True
            else:
                # session_states["Push_to_ADO_flag"] = False
                session_states[session_states[CONST_USERSTORY_OPTION]+'_push_to_ADO'] = False

            #Intialize the session_states[CONST_USERSTORY_OPTION]
            # session_states[session_states[CONST_USERSTORY_OPTION]] = 2

            if(response[2]!=''):
                #If error message is there, we are storing it in data and setting the status to true
                session_states[session_states[CONST_USERSTORY_OPTION]+'data'] = response[2]
                session_states[CONST_US_CREATE_NEW_STATUS] = True
            else:
                session_states[session_states[CONST_USERSTORY_OPTION]+'data'] = response[0]
                session_states[CONST_US_CREATE_NEW_STATUS] = False
        else:
            response = UserStoryDataRet(prompt,template,example,
                                    session_states[CONST_DEFAULT_FOLDER],Feature_title,UserStory_title,session_states[CONST_CONTENT],
                                    session_states[CONST_PROMPT_DICTIONARY][CONST_USERSTORY_DEFAULT_PROMPT],
                                    session_states,recreate_flag, temperature)

            #We are getting data, filepath and error message in a list. Using them in below variables. As filepath is not required for now because we have feature title, no need to extract from output docx.    
            session_states[UserStory_title+'data']=response[0]

            #Disabling ADO button according to selected template
            if(template1 == '' or template1 == 'None') and (example=='' or example=='None'):
                session_states[UserStory_title+'_push_to_ADO'] = True
            else:
                # session_states["Push_to_ADO_flag"] = False
                session_states[UserStory_title+'_push_to_ADO'] = False
        if(response[2]=='No_RAG'):
            session_states[page+'_enable'] = 3
        elif(response[2]!=''):
            st.toast(response[2])
            response = []
        if verify_log_variable(page, LoggerObject):
            # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
            logger.info(f"{page} create_response function Ended")

    except Exception as e:
        error_msg = handle_exception(e)
        st.toast(error_msg)
        if verify_log_variable(page, LoggerObject):
            # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
            logger.error(f"{page} {error_msg}")

"""
    Recreates an ADO (Azure DevOps) response based on user input and selected ADO list.

    Parameters:
    - ADOSelList: List of selected Azure DevOps items.
    - ADOUserStoryData: Data related to user stories in Azure DevOps.
    - session_states: Dictionary containing the current session state, including UI page, logger configuration, 
                      temperature setting, user input, and prompt dictionary.

    Process:
    1. Logs the start of the function execution.
    2. Retrieves temperature and user input for processing.
    3. Calls the helper function `recreateADOUserStoryDataRet` to generate the ADO response based on the provided parameters.
    4. Updates the session state to indicate that the user story has been recreated.
    5. Logs the end of the function execution.

    If an exception occurs during processing, it handles the exception, displays an error message, and logs the error.

    Returns:
    - A dictionary containing the recreated ADO response. If an error occurs, returns an empty dictionary.
"""
#Function to create and recreate the response
#Replacing ADOUserStoryData with userstory title
def recreateADOresponse(ADOSelList,Userstory_title,session_states):
    page = session_states[CURRENT_UI_PAGE]
    LoggerObject = session_states[LOGGERCONFIG_OBJECT]
    if verify_log_variable(page, LoggerObject):
        # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
        logger.info(f"{page} recreateADOresponse function Started")
    try:
        temperature=session_states[CONST_TEMPERATURE]
        customprompt=session_states[CONST_USERSTORY_USER_TEXT]
        #Value made True from False to enable ADO toggle for tab1 even user selects template as template doesn't impact output.
        session_states["Push_to_UpdateADO_flag"] = True #False

        recreateADOresponselist = {}
        #Replacing prompt with userstory title
        recreateADOresponselist = recreateADOUserStoryDataRet(customprompt, ADOSelList,
                                Userstory_title, session_states, temperature)
        
        session_states["UserStoryRecreatedFlag"]=1
        if verify_log_variable(page, LoggerObject):
                # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
                logger.info(f"{page} recreateADOresponse function Ended")

        return recreateADOresponselist
    except Exception as e:
        error_msg = handle_exception(e)
        st.toast(error_msg)
        if verify_log_variable(page, LoggerObject):
            # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
            logger.error(f"{page} {error_msg}")
        return {}


#Userstory UI Page function
@st.experimental_fragment
def main_page(session_states):
    apply_default_button_styles()
    session_states[CURRENT_UI_PAGE] = page = CONST_USERSTORY_PAGE
    LoggerObject = session_states[LOGGERCONFIG_OBJECT]
    if verify_log_variable(page, LoggerObject):
        # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
        logger.info(f"{page} {page} UI page Started")
    try:  
        if us_save_button_key not in session_states:
            session_states[us_save_button_key] = False      
        page_foldername='UserStories'
        default_path=session_states[CONST_DEFAULT_FOLDER]
        #Feature_folder_titles = []

        # Path to storage file
        us_path = os.path.join(default_path, page_foldername)
        storage_file = os.path.join(us_path, 'customize_settings_userstory.txt')
    
        # Read stored values
        stored_user_input, stored_template, stored_example = read_storage(storage_file, session_states)

        #Defining session states to store customize inputs
        if CONST_USERSTORY_UNIQUE_KEY not in session_states:
            session_states[CONST_USERSTORY_UNIQUE_KEY]='3'
        if CONST_USERSTORY_USER_TEXT not in session_states:
            session_states[CONST_USERSTORY_USER_TEXT]=stored_user_input
        if CONST_USERSTORY_USER_TEMPLATE not in session_states:
            if stored_template != '' and stored_template != 'None':
                template_path=os.path.join(default_path,page_foldername,'Templates',stored_template)
                extension=os.path.splitext(stored_template)[1]
                session_states[CONST_USERSTORY_USER_TEMPLATE]= extract_data_from_text_pdf_docx_files(template_path,extension, session_states)
            else:            
                session_states[CONST_USERSTORY_USER_TEMPLATE]= ""
        if CONST_USERSTORY_USER_EXAMPLE not in session_states:
            session_states[CONST_USERSTORY_USER_EXAMPLE]=""
            if stored_example != '' and stored_example != 'None':
                example_path=os.path.join(default_path,page_foldername,'Examples',stored_example)
                extension=os.path.splitext(stored_example)[1]
                session_states[CONST_USERSTORY_USER_EXAMPLE] = extract_data_from_text_pdf_docx_files(example_path,extension, session_states)
            else:            
                session_states[CONST_USERSTORY_USER_EXAMPLE]= ""
        if CONST_USERSTORY_SELECTED_TEMPLATE not in session_states:
            session_states[CONST_USERSTORY_SELECTED_TEMPLATE]=stored_template
        if CONST_USERSTORY_SELECTED_EXAMPLE not in session_states:
            session_states[CONST_USERSTORY_SELECTED_EXAMPLE]=stored_example

        # This flag is set to prevent the prompt output from being created multiple times.
        # Setting session_states[CONST_CREATE_NEW_FLAG] to 0 to Initialize
        # and 1 indicates that the output should not be generated repeatedly.
        if CONST_US_CREATE_NEW_FLAG not in session_states:
            session_states[CONST_US_CREATE_NEW_FLAG]=0

        #option is setting in session state
        if CONST_USERSTORY_OPTION not in session_states:
            session_states[CONST_USERSTORY_OPTION]=''
        # if "Push_to_ADO_flag" not in session_states:
        #     session_states["Push_to_ADO_flag"] = True
        if "Push_to_UpdateADO_flag" not in session_states:
            session_states["Push_to_UpdateADO_flag"] = True

        #Creating three columns and using customize in column1 only. column2,column3 aren't used but they are required.
        column1, column2, column3 = st.columns(3)
        global user_story_dict, Feature_titles
        
        with column3:
            if USERSTORY_ADO_TOGGLE not in session_states:
                session_states[USERSTORY_ADO_TOGGLE] = False
            
            session_states[USERSTORY_ADO_TOGGLE] = st.toggle("ADO", value=session_states[USERSTORY_ADO_TOGGLE], key="userstory_toggle")

            global user_story_dict, Feature_titles
            if not session_states[USERSTORY_ADO_TOGGLE]:
                Feature_titles = []
                user_story_dict = {}
                Feature_titles.append('Create new User Story')
            else:
                user_story_dict, Feature_titles = load_user_stories(session_states)  
                refresh_ado_features(LoggerObject, page, session_states)
            # Adding the info button      
            tooltip = tooltip_text(session_states)
            # Add a circular button and display the text on hover
            st.markdown(
                f"""
                <div class="info-container">
                    <button class="bubble-button">
                        <i style="font-style: italic; font-family: 'Georgia', 'Times New Roman', 'Cursive', sans-serif;">i</i>
                    </button>
                    <div class="info-text">{tooltip['UserStory Page Info']}</div>
                </div>
                """,
                unsafe_allow_html=True,
            )
        with column1:
            with st.popover("Customize User Story"):

                #Assigning unique key
                unique_key=session_states[CONST_USERSTORY_UNIQUE_KEY]
                time=datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                UserStory_user_text=''
                UserStory_user_template=''
                UserStory_user_example=''

                UserStory_user_text = st.text_area("Provide an Input to Shape User Story Outcomes", value=session_states[CONST_USERSTORY_USER_TEXT], key = 'prompt_us'+unique_key)

                #Retrieving all files in Templates folder
                
                templates = os.listdir(os.path.join(default_path,page_foldername,'Templates'))
                templates = [file for file in templates if file.endswith(('.pdf', '.txt', '.docx'))]
                templates.append('None')

                # If there are templates
                if templates:
                    try:
                        selected_template = st.selectbox("Select a template to structure the User Story:", templates, index=len(templates) - 1 if stored_template == "" else templates.index(stored_template), key='template_us'+unique_key)
                        if (selected_template!=None and selected_template!='None'):
                            template_path=os.path.join(default_path,page_foldername,'Templates',selected_template)
                            extension=os.path.splitext(template_path)[1]
                            UserStory_user_template=extract_data_from_text_pdf_docx_files(template_path,extension, session_states)
                    except ValueError:
                        st.toast(f'The selcted Template "{stored_template}" is not present in the directory.')
                        if verify_log_variable(page, LoggerObject):
                            # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
                            logger.error(f"{page} The selcted Template {stored_template} is not present in the directory.")
                        # selected_template=None

                #Retrieving all files in Examples folder 
                examples = os.listdir(os.path.join(default_path,page_foldername,'Examples'))
                examples = [file for file in examples if file.endswith(('.pdf', '.txt', '.docx'))]
                examples.append('None')

                # If there are examples
                if examples:
                    try:
                        selected_example = st.selectbox("Select an example to structure the User Story:", examples, index=len(examples) - 1 if stored_example == "" else examples.index(stored_example), key='example_us'+unique_key)
                        if (selected_example != None and selected_example != 'None'):
                            example_path=os.path.join(default_path,page_foldername,'Examples',selected_example)
                            extension=os.path.splitext(example_path)[1]
                            UserStory_user_example=extract_data_from_text_pdf_docx_files(example_path,extension, session_states)
                    except ValueError:
                        st.toast(f'The selected Example "{stored_example}" is not present in the directory.')
                        if verify_log_variable(page, LoggerObject):
                            # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
                            logger.error(f"{page} The selcted Example {stored_example} is not present in the directory.")
                        # selected_example=None

                # On Apply, custom values are stored in session state
                if st.button('Apply'):
                    st.write('Applied')
                    session_states[CONST_USERSTORY_USER_TEXT] = UserStory_user_text
                    session_states[CONST_USERSTORY_USER_TEMPLATE] = UserStory_user_template
                    session_states[CONST_USERSTORY_USER_EXAMPLE] = UserStory_user_example
                    session_states[CONST_USERSTORY_SELECTED_TEMPLATE] = selected_template
                    session_states[CONST_USERSTORY_SELECTED_EXAMPLE] = selected_example
                        
                    if UserStory_user_text is None:
                        session_states[CONST_USERSTORY_USER_TEXT] = ""
                    if UserStory_user_template is None:
                        session_states[CONST_USERSTORY_USER_TEMPLATE] = "None"
                    if UserStory_user_example is None:
                        session_states[CONST_USERSTORY_USER_EXAMPLE] = "None"
                    if selected_template is None:
                        session_states[CONST_USERSTORY_SELECTED_TEMPLATE] = 'None'
                    if selected_example is None:
                        session_states[CONST_USERSTORY_SELECTED_EXAMPLE] = 'None'

                    # Store the current values to storage file
                    write_storage(storage_file, session_states[CONST_USERSTORY_USER_TEXT], session_states[CONST_USERSTORY_SELECTED_TEMPLATE], session_states[CONST_USERSTORY_SELECTED_EXAMPLE], session_states)

        page=CONST_USERSTORY_PAGE
        # st.subheader(page)

        #Adding note if database is not there
        if(not(is_db_exists(default_path))):
            st.write("Note: No contextual database and/or user prompt detected. Providing both will enhance the accuracy of the output.")
        st.subheader(page)

        if(session_states[page+"_enable"]==1):
            if (is_db_exists(default_path)):
                #Summarizing the content and storing in a session state, which is used as content. 
                with st.spinner('Loading the User Story Page....'):
                    summary_status=summary(session_states)
                if(summary_status!=''):
                    st.toast(summary_status)
            else:
                session_states['ingest']=2
                session_states[CONST_CONTENT]=''
            session_states[page+"_enable"]=2
        if(session_states[page+"_enable"]==2):

            #Accessing Feature folders and Feature titles in a list
            Feature_folder_titles=extract_folders(session_states[CONST_FEATURE_FINALIZED_PATH],CONST_FEATURE_PAGE,session_states,0)

            #Accessing Userstory foldernames and titles from FeatureList document
            UserStory_folder_titles=extract_folders(session_states[CONST_FEATURE_FINALIZED_PATH],CONST_FEATURE_PAGE,session_states,1)
            #UserStory_folders=split_folders_titles(Feature_folder_titles,0)

            #Separating folders and Feature titles
            Feature_titles_unprocessed=split_folders_titles(Feature_folder_titles,session_states,1)

            #Processed Userstory titles
            UserStory_titles=split_folders_titles(UserStory_folder_titles,session_states,1)
            if not session_states[USERSTORY_ADO_TOGGLE]:
                Feature_titles=[]
                for item in Feature_titles_unprocessed:
                    Feature_titles.append(item[0])
                #Adding Create new to Feature_titles
                Feature_titles.append('Create new User Story')              
            folders=[]
            titles=[]

            if session_states[USERSTORY_ADO_TOGGLE]:
                tab1, tab2 = st.tabs([":magic_wand: Enhance Existing User Story", ":star: Create User Story from Feature"])

                with tab1:
                #Selecting a userstory from ADO
                    organization_name = session_states[CONST_ENTER_ORG_NAME]
                    project = session_states[CONST_SEL_PROJECT]
                    team = session_states[CONST_SEL_STEAM]
                    iteration = session_states[CONST_SEL_SITERATION]
                    if organization_name:
                        Feature_title = st.selectbox(f"Select a Parent Feature from ADO Iteration Path: {organization_name}\\{project}\\{iteration}", Feature_titles,index=None,key="Userstory_selectbox_from_ADO")
                    else:
                        Feature_title = st.selectbox(f"Select a Parent Feature from ADO Iteration Path:", Feature_titles,index=None,key="Userstory_selectbox_from_ADO")
                        st.toast("Error: The organization could not be found, or you do not have access to it. Please verify in settings page")

                    if Feature_title:
                        workitem_id = Feature_title.split('~')[0]
                        selected_story = user_story_dict[int(workitem_id)]
                        selected_description = (
                            f"{selected_story['Description']}\n"
                            f"Acceptance Criteria: {selected_story['AcceptanceCriteria']}\n"
                            f"How to Demo: {selected_story['Howtodemo']}\n"
                            f"Additional Information: {selected_story['AdditionalInfo']}\n"
                        )
                        
                        #Replace html text
                        selected_description = selected_description.replace("<br>", "\n")
                        cleaned_text = selected_description

                        # Split the cleaned text into sections
                        Desc=description = cleaned_text.split("Acceptance Criteria:")[0].strip()
                        Accep= acceptance_criteria = cleaned_text.split("Acceptance Criteria:")[1].split("How to Demo:")[0].strip()
                        demo= how_to_demo = cleaned_text.split("How to Demo:")[1].split("Additional Information:")[0].strip()
                        AddInfo= Add_Info = cleaned_text.split("Additional Information:")[1].strip()

                        # Display read-only label with value
                        st.write(f"**ID:** {workitem_id}")
                        if "curr_workitem_ID" in session_states:
                            session_states["prev_workitem_ID"] = st.session_state["curr_workitem_ID"]

                        st.session_state["curr_workitem_ID"] = workitem_id
                        if "prev_workitem_ID" not in st.session_state:
                            session_states["prev_workitem_ID"] = workitem_id

                        #WorkItem ID's are different    
                        if session_states["prev_workitem_ID"] != st.session_state["curr_workitem_ID"]:
                            session_states["Recreate_Description"] = False
                            session_states["Recreate_Acceptance_Criteria"] = False
                            session_states["Recreate_How_to_Demo"] = False
                            session_states["Recreate_Additional_Information"] = False
                            session_states["Push_to_UpdateADO_flag"] = True

                        #Default set to False
                        if "Recreate_Description" not in session_states:
                            session_states["Recreate_Description"] = False
                        if "Recreate_Acceptance_Criteria" not in session_states:
                            session_states["Recreate_Acceptance_Criteria"] = False
                        if "Recreate_How_to_Demo" not in session_states:
                            session_states["Recreate_How_to_Demo"] = False
                        if "Recreate_Additional_Information" not in session_states:
                            session_states["Recreate_Additional_Information"] = False

                        # Example usage
                        toggle_button_desc = st.checkbox('Description (ADO Content)', value=False, key=str(workitem_id)+"desc")
                        st.markdown(description, unsafe_allow_html=True)

                        if toggle_button_desc and session_states["Recreate_Description"]:
                            Desc, toggle_button_desc = create_text_area('Description', description, toggle_button_desc)

                        st.divider()
                        toggle_button_Accep = st.checkbox('Acceptance_Criteria (ADO Content)', value=False, key=str(workitem_id)+"accep")  # Default to enabled
                        st.markdown(acceptance_criteria, unsafe_allow_html=True)

                        if toggle_button_Accep and session_states["Recreate_Acceptance_Criteria"]:
                            Accep, toggle_button_Accep = create_text_area('Acceptance_Criteria', acceptance_criteria, toggle_button_Accep)

                        st.divider()
                        toggle_button_Demo = st.checkbox('How_to_Demo (ADO Content)', value=False, key=str(workitem_id)+"demo")  # Default to enabled
                        st.markdown(how_to_demo, unsafe_allow_html=True)

                        if toggle_button_Demo and session_states["Recreate_How_to_Demo"]:
                            demo, toggle_button_Demo = create_text_area('How_to_Demo', how_to_demo, toggle_button_Demo)

                        st.divider()    
                        toggle_button_AddInfo = st.checkbox('Additional_Information (ADO Content)', value=False, key=str(workitem_id)+"addinfo")  # Default to enabled
                        st.markdown(Add_Info, unsafe_allow_html=True)

                        if toggle_button_AddInfo and session_states["Recreate_Additional_Information"]:
                            AddInfo, toggle_button_AddInfo = create_text_area('Additional_Information', Add_Info, toggle_button_AddInfo)
                        
                        #Recreate prompts for individual sections
                        Desc_recreate_prompt = session_states[CONST_PROMPT_DICTIONARY][USERSTORY_DEFAULT_PROMPT_DESCRIPTION]
                        Accep_recreate_prompt = session_states[CONST_PROMPT_DICTIONARY][USERSTORY_DEFAULT_PROMPT_AC]
                        demo_recreate_prompt = session_states[CONST_PROMPT_DICTIONARY][USERSTORY_DEFAULT_PROMPT_HTD]
                        Add_Info_recreate_prompt = session_states[CONST_PROMPT_DICTIONARY][USERSTORY_DEFAULT_PROMPT_ADDINFO]

                        ADOisenabledgetdata = []
                        if toggle_button_desc:
                            ADOisenabledgetdata.append({CONST_DESC: Desc_recreate_prompt})
                        if toggle_button_Accep:
                            ADOisenabledgetdata.append({CONST_ACCEPT: Accep_recreate_prompt})
                        if toggle_button_Demo:
                            ADOisenabledgetdata.append({CONST_DEMO: demo_recreate_prompt})
                        if toggle_button_AddInfo:
                            ADOisenabledgetdata.append({CONST_ADDINFO: Add_Info_recreate_prompt})

                        col1, col2 = st.columns(2)
                        with col1:
                            # recreate=st.button('Recreate',key='UserStory_recreate')
                            st.button('Recreate', key='userstory_recreate_ado', on_click=recreate_userstory_ado, 
                                  args=(session_states, page, ADOisenabledgetdata, Feature_title, 
                                        organization_name, project, team, 
                                        toggle_button_desc, toggle_button_Accep, toggle_button_Demo, toggle_button_AddInfo, 
                                        default_path))
                        push_ADO = None
                        with col2:
                            if(session_states["Push_to_UpdateADO_flag"]): 
                                push_ADO=st.button('Push to ADO',key='Update_ADO') # on_click= PushToADO(session_states, page, selected_id))
                            else:
                                st.warning("Push denied. Set template and/or example to None and recreate.")
                        
                        if push_ADO:
                            analytics = Analytics(default_path, session_states.username)
                            analytics.write_analytics(CONST_User_Story, Feature_title, "ADO-Push to ADO", organization_name, project, team)
                            with st.spinner("Updating "+page+", please wait...."):
                                session_states[session_states[CONST_USERSTORY_OPTION]]=1
                                error_msg = update_work_item(session_states[CONST_ENTER_ORG_NAME], session_states[CONST_SEL_PROJECT], workitem_id,
                                                [Desc, Accep, demo, AddInfo], session_states)
                                if(error_msg):
                                    st.toast(error_msg)
                with tab2:
                    create_ado_child_item(session_states, page)
            else:
                #Selecting Userstory from a parent Feature
                Feature_title = st.selectbox("Select a Parent Feature (Created from the Feature Page) or Create new User Story:", Feature_titles,index=None,key="Userstory_selectbox_for_parent")
                if Feature_title!='Create new User Story' and Feature_title!=None:
                    session_states[CONST_US_CREATE_NEW_FLAG] = 0
                    prev_title_index=0
                    for i in range(len(Feature_titles)):
                        if(Feature_title==Feature_titles[i]):
                            prev_title_index=i
                    folders=split_folders_titles(UserStory_titles[prev_title_index],session_states,0)
                    titles=split_folders_titles(UserStory_titles[prev_title_index],session_states,1)
                    radio_buttons=titles
            
                    #Selecting a Userstory from the listed radio buttons
                    session_states[CONST_USERSTORY_OPTION]=st.radio('Select a '+page+':',radio_buttons,on_change=radio_change,args=(radio_buttons,session_states,), index=None)
                    if(session_states[CONST_USERSTORY_OPTION]):
                        title_index=0
                        #Extracting foldername of the userstory from the list
                        for i in range(len(titles)):
                            if(session_states[CONST_USERSTORY_OPTION]==titles[i]):
                                title_index=i
                        session_states[CONST_USERSTORY_FOLDERNAME]=folders[title_index]
                        #Creating the response
                        if(session_states[session_states[CONST_USERSTORY_OPTION]]==0):
                            generate=st.button('Create',key='UserStory_create')
                            if generate:
                                session_states[us_save_button_key] = False
                                with st.spinner("Creating "+page+", please wait...."):
                                    session_states[session_states[CONST_USERSTORY_OPTION]]=1
                                    create_response(session_states[CONST_USERSTORY_OPTION], Feature_title,session_states,0)
                                    analytics = Analytics(default_path, session_states.username)
                                    analytics.write_analytics(CONST_User_Story, session_states[CONST_USERSTORY_OPTION], "Parent-Create")
                                if(session_states[page+"_enable"]==3):
                                    session_states[page+"_enable"]=1
                                    session_states[CONST_USERSTORY_OPTION]=None

                elif(Feature_title=='Create new User Story' and session_states[CONST_US_CREATE_NEW_FLAG]==0):
                    session_states[us_save_button_key] = False
                    # This flag is set to prevent the prompt output from being created multiple times.
                    session_states[CONST_US_CREATE_NEW_FLAG]=1
                    with st.spinner('Creating new UserStory, please wait...'):
                        create_response('', Feature_title,session_states,0)
                    analytics = Analytics(default_path, session_states.username)
                    analytics.write_analytics(CONST_User_Story, session_states[CONST_USERSTORY_OPTION], "Create")
                    if session_states[page+"_enable"] == 3:
                        session_states[page+"_enable"] = 1
                        session_states[CONST_USERSTORY_OPTION]=None
                    else:
                        session_states[session_states[CONST_USERSTORY_OPTION]]=1
                    #For orphan it will create foldername
                    session_states[CONST_USERSTORY_FOLDERNAME]=Next_Orphan_foldername(session_states[CONST_USERSTORY_FINALIZED_PATH],CONST_USERSTORY_PAGE,session_states)
                
                #To recreate and store the response
                if(Feature_title!=None and session_states[CONST_USERSTORY_OPTION]!=None):
                    #ReCreating and saving the response
                    if(session_states[CONST_USERSTORY_OPTION]+'data' in session_states):
                        session_states[session_states[CONST_USERSTORY_OPTION]+'text']=st.text_area(label=session_states[CONST_USERSTORY_OPTION],label_visibility="collapsed",height=700,value=session_states[session_states[CONST_USERSTORY_OPTION]+'data'])
                        
                        if session_states[CONST_USERSTORY_OPTION]+'_push_to_ADO' not in session_states:
                            session_states[session_states[CONST_USERSTORY_OPTION]+'_push_to_ADO'] = True

                        if(session_states[session_states[CONST_USERSTORY_OPTION]]<=2):
                            col1, col2 = st.columns(2)
                            with col1:
                                # generate=st.button('Recreate',key='UserStory_recreate')
                                st.button('Recreate', key='Userstory_recreate', on_click=recreate_userstory, args=(session_states, page, Feature_title, default_path))

                            push_ADO = None
                            with col2:
                                if(session_states[session_states[CONST_USERSTORY_OPTION]+'_push_to_ADO']):
                                    push_ADO = st.button('Push to ADO', key='Push_to_ADO')
                                else:
                                    st.warning("Push denied. Set template and/or example to None and recreate.")
                            # if generate:
                            #     session_states[us_save_button_key] = False
                            #     with st.spinner("Recreating "+page+", please wait...."):
                            #         session_states[session_states[CONST_USERSTORY_OPTION]]=2
                            #         if(Feature_title!='Create new'):
                            #             create_response(session_states[CONST_USERSTORY_OPTION],Feature_title,session_states,1)                  
                            #         else:
                            #             create_response(session_states[CONST_USERSTORY_OPTION],'',session_states,1)

                            #         analytics = Analytics(default_path, session_states.username)
                            #         analytics.write_analytics(CONST_User_Story, session_states[CONST_USERSTORY_OPTION], "Recreate")
                            if push_ADO:
                                analytics = Analytics(default_path, session_states.username)
                                analytics.write_analytics(CONST_User_Story, session_states[CONST_USERSTORY_OPTION], "Push to ADO")
                                if(session_states[CONST_USERSTORY_USER_TEMPLATE] =='' or session_states[CONST_USERSTORY_USER_TEMPLATE]=='None'):
                                    with st.spinner("Updating " + page + ", please wait...."):
                                        session_states[session_states[CONST_USERSTORY_OPTION]] = 1
                                        status_code, msg, _ = create_new_ADOID(session_states[CONST_ENTER_ORG_NAME], session_states[CONST_SEL_PROJECT], 
                                                                                session_states[CONST_SEL_STEAM], session_states[session_states[CONST_USERSTORY_OPTION] + 'text'], session_states)
                                        if status_code ==200:
                                            st.success(msg)  
                                        else:
                                            st.toast(msg)
                            #After recreate need to initialize to 1
                            session_states[session_states[CONST_USERSTORY_OPTION]] = 1
                            save_button=st.button('Save',key='UserStory_save')
                            
                            #Saving the response
                            if save_button:
                                session_states[us_save_button_key] = True
                                analytics = Analytics(default_path, session_states.username)
                                analytics.write_analytics(CONST_User_Story, session_states[CONST_USERSTORY_OPTION], "Save")
                                with st.spinner('Saving UserStory....'):
                                    session_states[session_states[CONST_USERSTORY_OPTION]+'data']=session_states[session_states[CONST_USERSTORY_OPTION]+'text']
                                    finalize_data(page,session_states[CONST_USERSTORY_FOLDERNAME],session_states[session_states[CONST_USERSTORY_OPTION]+'data'],session_states[CONST_USERSTORY_OPTION],session_states)

                            if session_states[us_save_button_key]:
                                feedback_dialog(session_states, us_save_button_key, default_path, session_states.username, CONST_User_Story, session_states[CONST_USERSTORY_OPTION])   

        if verify_log_variable(page, LoggerObject):
            # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
            logger.info(f"{page} UI page Ended")
    except IndexError:
        if Feature_folder_titles == []:
            st.toast(f'The selected Feature Title "{session_states[CONST_FEATURE_TITLE]}" is not present in the directory.')
            if verify_log_variable(page, LoggerObject):
                # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
                logger.error(f"{page} The selected Feature Title {session_states[CONST_FEATURE_TITLE]} is not present in the directory.")
        else:
            st.toast(f'The selected User Story "{session_states[CONST_USERSTORY_OPTION]}" is not present in the directory.')
            if verify_log_variable(page, LoggerObject):
                # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
                logger.error(f"{page} The selected User Story {session_states[CONST_USERSTORY_OPTION]} is not present in the directory.")
    except Exception as e:
        error_msg = handle_exception(e)
        st.toast(error_msg)
        if verify_log_variable(page, LoggerObject):
            # log_writer(session_states['log_file_descriptor'], page, "load_examples function started")
            logger.error(f"{page} {error_msg}")

def userstory_page(session_states):
    global user_story_dict, Feature_titles
    #user_story_dict, Feature_titles = load_user_stories()
    Feature_titles = []     
    Feature_titles.append('Create new User Story')
    main_page(session_states)


def PushToADO(session_states, page, selected_id):
    with st.spinner("Updating "+page+", please wait...."):
        session_states[session_states[CONST_USERSTORY_OPTION]]=1                            
        error_msg = update_work_item(session_states[CONST_ENTER_ORG_NAME], session_states[CONST_SEL_PROJECT], selected_id, session_states[session_states[CONST_USERSTORY_OPTION]+'text'], session_states)
        if(error_msg):
            st.toast(error_msg)

# Function to return list of user stories for the feature title
def load_saved_userstories(feature_key, session_states):
    default_path = session_states[CONST_DEFAULT_FOLDER]
    saved_file_path = os.path.join(default_path, "UserStories", "ADO", "user_story_titles.json")

    # Check if the file exists
    if not os.path.exists(saved_file_path):
        return []

    # Load the data from the file
    try:
        with open(saved_file_path, "r") as file:
            data = json.load(file)
    except ValueError:
        st.toast("Error while reading saved user story file. Returning an empty list.")
        return []

    # Return the user stories for the given feature title
    return [story["title"] for story in data.get(feature_key, [])]

#Function to fetch child items again after pushing work item into ADO
def fetch_us_child_items_after_ADO(session_states):
    page = session_states[CURRENT_UI_PAGE]
    LoggerObject = session_states[LOGGERCONFIG_OBJECT]
    write_log(LoggerObject, page, "fetch_child_items_after_ADO function Started")
    try:
        with st.spinner("Fetching child Userstories..."):
            child_items = get_child_items(session_states.get(CONST_ENTER_ORG_NAME), session_states.get(CONST_SEL_PROJECT), session_states[ADO_US_SELECTED_FEATURE_KEY], session_states, 'User Story')
        if isinstance(child_items, str):  # Handle error messages
            st.toast(child_items)
            session_states[ADO_US_FEATURE_CHILD_ITEMS_KEY] = []
            write_log(LoggerObject, page, "Failed to fetch child items from ADO")
        else:
            session_states[ADO_US_FEATURE_CHILD_ITEMS_KEY] = child_items
            write_log(LoggerObject, page, "Fetched child items from ADO")

        write_log(LoggerObject, page, "fetch_child_items_after_ADO function Ended")
    except Exception as e:
        error_msg = handle_exception(e)
        write_log(LoggerObject, page, error_msg)

def create_ado_child_item(session_states, page):
    logger_object = session_states[LOGGERCONFIG_OBJECT]

    write_log(logger_object, page, "ADO - create user story from feature started")
    try:
        #added line to access default path, may useful in many lines.
        default_path = session_states[CONST_DEFAULT_FOLDER]

        if ADO_US_FEATURES_KEY not in session_states:
            session_states[ADO_US_FEATURES_KEY] = {}
    
        # Display dropdown for features
        feature_titles = {f"Feature {feature['ID']} - {feature['Title']}": feature["ID"] for feature in session_states[ADO_US_FEATURES_KEY]}
        selected_feature_title = st.selectbox(f"Select a Parent Feature under {session_states[CONST_SEL_STEAM]}", options=list(feature_titles.keys()), key="US_ado_feature_dropdown")

        if selected_feature_title:
            # Fetch parent and child details only when the dropdown value changes
            if ADO_US_SELECTED_FEATURE_KEY not in session_states or session_states[ADO_US_SELECTED_FEATURE_KEY] != feature_titles.get(selected_feature_title):
                session_states[ADO_US_SELECTED_FEATURE_KEY] = feature_titles.get(selected_feature_title)

                # Retrieve the selected feature's details
                selected_feature = next((feature for feature in session_states[ADO_US_FEATURES_KEY] if feature["ID"] == session_states[ADO_US_SELECTED_FEATURE_KEY]), None)
                if selected_feature:
                    session_states[ADO_US_FEATURE_DETAILS_KEY] = {
                        "ID": selected_feature["ID"],
                        "Title": selected_feature.get("Title", "No Title"),
                        "Description": selected_feature.get("Description", "No Description"),
                        "AcceptanceCriteria": selected_feature.get("AcceptanceCriteria", "No Acceptance Criteria"),
                        "HowToDemo": selected_feature.get("HowToDemo", "No How to Demo"),
                        "AdditionalInfo": selected_feature.get("AdditionalInfo", "No Additional Info"),
                        "url": selected_feature.get("url", None),
                    }
                else:
                    st.toast("Failed to retrieve the selected feature's details.")
                    return

                # Fetch parent details
                parent_details = get_parent_item(session_states.get(CONST_ENTER_ORG_NAME), session_states.get(CONST_SEL_PROJECT), session_states[ADO_US_SELECTED_FEATURE_KEY], session_states)
                if "Error" in parent_details:
                    st.warning(parent_details["Error"])
                    session_states[ADO_US_FEATURE_PARENT_DETAILS_KEY] = None
                    write_log(logger_object, page, "Failed to fetch parent details from ADO")
                else:
                    session_states[ADO_US_FEATURE_PARENT_DETAILS_KEY] = parent_details
                    write_log(logger_object, page, "Fetched parent details from ADO")

                # Fetch child items
                with st.spinner("Fetching child Userstories..."):
                    child_items = get_child_items(session_states.get(CONST_ENTER_ORG_NAME), session_states.get(CONST_SEL_PROJECT), session_states[ADO_US_SELECTED_FEATURE_KEY], session_states, 'User Story')
                if isinstance(child_items, str):  # Handle error messages
                    st.toast(child_items)
                    session_states[ADO_US_FEATURE_CHILD_ITEMS_KEY] = []
                    write_log(logger_object, page, "Failed to fetch child items from ADO")
                else:
                    session_states[ADO_US_FEATURE_CHILD_ITEMS_KEY] = child_items
                    write_log(logger_object, page, "Fetched child items from ADO")

                # Reset the US_List -> Replace with logic for loading from File
                session_states[USERSTORY_LIST_OF_TITLE_FROM_PARENT_PROMPT] = None 

            # Display child items
            if session_states.get(ADO_US_FEATURE_CHILD_ITEMS_KEY):
                with st.expander("Child Artifacts in ADO(for reference)"):
                    for child in session_states[ADO_US_FEATURE_CHILD_ITEMS_KEY]:
                        artifact_type = child.get("WorkItemType", "Unknown")
                        title = child.get("Title", "No Title")
                        st.markdown(f"- **{artifact_type} {child['ID']}:** [{title}]({session_states[CONST_TFS_URL]}/{session_states.get(CONST_ENTER_ORG_NAME)}/_workitems/edit/{child['ID']})")
            else:
                st.info("No child items found.")

            feature_key = f"{session_states.get(CONST_SEL_PROJECT)}_{session_states[ADO_US_FEATURE_DETAILS_KEY]['ID']}"

            saved_feature_userstories = load_saved_userstories(feature_key, session_states)

            #Flag to display save titles button, won't be displayed if user clicks load titles button.
            if ADO_US_FEATURES_HAS_SAVED_US_TITLES_KEY not in session_states:
                session_states[ADO_US_FEATURES_HAS_SAVED_US_TITLES_KEY] = False

            if ADO_US_FEATURE_HAS_NEW_US_TITLES_KEY not in session_states:
                session_states[ADO_US_FEATURE_HAS_NEW_US_TITLES_KEY] = False

            column1, column2 = st.columns(2)
            if saved_feature_userstories:
                with column1:
                    # Button to create user story titles
                    if st.button("Load titles", help="Will load saved user story titles for the selected parent feature"):
                        with st.spinner("Loading user story titles..."):
                            session_states[USERSTORY_LIST_OF_TITLE_FROM_PARENT_PROMPT] = saved_feature_userstories
                            session_states[ADO_US_FEATURE_HAS_NEW_US_TITLES_KEY] = False
                
            with column2:
                # Button to create user story titles
                generate_button = st.button("Generate titles", help="Generates possible user story titles for the selected parent feature")
                if generate_button:
                    with st.spinner("Generating user story titles..."):
                        
                        #Making the flag to false, so that save titles button will be visible only if new titles are available to save.
                        session_states[ADO_US_FEATURES_HAS_SAVED_US_TITLES_KEY] = False
                        mega_prompt_for_user_story_title = session_states[CONST_PROMPT_DICTIONARY][USERSTORY_CREATE_TITLE_FROM_PARENT_PROMPT]
                        mega_prompt_for_user_story_title = mega_prompt_for_user_story_title.replace("<UserStoryListStart>", session_states[CONST_PROMPT_DICTIONARY][START_USERSTORYLIST])
                        mega_prompt_for_user_story_title = mega_prompt_for_user_story_title.replace("<UserStoryListEnd>", session_states[CONST_PROMPT_DICTIONARY][END_USERSTORYLIST])
                        mega_prompt_for_user_story_title = mega_prompt_for_user_story_title.replace("<CUSTOMIZE_USER_INPUT>", session_states[CONST_USERSTORY_USER_TEXT])
                        mega_prompt_for_user_story_title = mega_prompt_for_user_story_title.replace("<INPUT>", generate_text_from_details(session_states.get(ADO_US_FEATURE_PARENT_DETAILS_KEY), session_states.get(ADO_US_FEATURE_DETAILS_KEY)))

                        response = CreateChatbot(mega_prompt_for_user_story_title, session_states)
                        #Writing to log titles into the prompt and response files
                        store_prompt_searchkey_response_Feature(os.path.join(default_path,'UserStories'), mega_prompt_for_user_story_title, response[1], session_states)
                        analytics = Analytics(default_path, session_states.username)
                        analytics.write_analytics(CONST_User_Story, "", "ADO-Generate titles", session_states[CONST_ENTER_ORG_NAME], session_states[CONST_SEL_PROJECT], session_states[CONST_SEL_SITERATION])

                        list_of_us_string = response[1]

                        starting_index, ending_index = extract_token_indices(
                            list_of_us_string, 
                            session_states[CONST_PROMPT_DICTIONARY][START_USERSTORYLIST], 
                            session_states[CONST_PROMPT_DICTIONARY][END_USERSTORYLIST]
                        )

                        if starting_index != -1 and ending_index != -1:
                            user_story_block = list_of_us_string[starting_index:ending_index].strip()
                            session_states[USERSTORY_LIST_OF_TITLE_FROM_PARENT_PROMPT] = [
                                re.sub(r'^\d+\.\s*', '', story.strip()) 
                                for story in user_story_block.splitlines() 
                                if story.strip()
                            ]
                            session_states[ADO_US_FEATURE_HAS_NEW_US_TITLES_KEY] = True
                            session_states[ADO_US_FEATURES_HAS_SAVED_US_TITLES_KEY] = False
                        else:
                            session_states[USERSTORY_LIST_OF_TITLE_FROM_PARENT_PROMPT] = []

            if generate_button and USERSTORY_LIST_OF_TITLE_FROM_PARENT_PROMPT in session_states and len(session_states[USERSTORY_LIST_OF_TITLE_FROM_PARENT_PROMPT]) == 0:
                st.warning("No user story titles generated. The feature does not have enough details to generate user story titles. Please enhance the feature to add a description or an acceptance criteria (Navigate to Feature page)")       

            # Display generated user story titles
            if session_states.get(USERSTORY_LIST_OF_TITLE_FROM_PARENT_PROMPT):
                user_story_titles = session_states[USERSTORY_LIST_OF_TITLE_FROM_PARENT_PROMPT]
                if not session_states[ADO_US_FEATURE_HAS_NEW_US_TITLES_KEY]:
                    st.write("Previously saved user story titles for the selected feature")
                    session_states[CONST_USERSTORY_OPTION] = st.radio('Select a User Story you would like to create:', user_story_titles, on_change=radio_change, args=(user_story_titles, session_states,), index=None)
                else:
                    st.write("Suggested user story titles for the selected feature")
                    session_states[CONST_USERSTORY_OPTION] = st.radio('Select a User Story you would like to create:', user_story_titles, on_change=radio_change, args=(user_story_titles, session_states,), index=None)

                # show save button only if new titles are generated and not saved yet.
                if session_states[ADO_US_FEATURE_HAS_NEW_US_TITLES_KEY] and not session_states[ADO_US_FEATURES_HAS_SAVED_US_TITLES_KEY]:
                    if st.button("Save titles", help="Save the generated user story titles for the selected parent feature"):
                        with st.spinner("Saving the user story titles for the feature..."):
                            save_userstories_for_feature(session_states[USERSTORY_LIST_OF_TITLE_FROM_PARENT_PROMPT], feature_key, session_states)
                            session_states[ADO_US_FEATURES_HAS_SAVED_US_TITLES_KEY] = True
                            st.toast("User story titles are saved successfully.")

                if session_states[CONST_USERSTORY_OPTION]:
                    if session_states[session_states[CONST_USERSTORY_OPTION]] == 0:
                        create_button = st.button('Create user story', key='US_ADO_create', help="Create a new user story based on the selected title")
                        if create_button:
                            with st.spinner("Creating user story, please wait..."):
                                session_states[session_states[CONST_USERSTORY_OPTION]] = 1
                                template = session_states[CONST_USERSTORY_USER_TEMPLATE]
                                example=session_states[CONST_USERSTORY_USER_EXAMPLE]
                                if(template == '' or template == 'None') and (example=='' or example=='None'):
                                    session_states[session_states[CONST_USERSTORY_OPTION]+'_push_new_US_to_ADO'] = True
                                else:
                                    session_states[session_states[CONST_USERSTORY_OPTION]+'_push_new_US_to_ADO'] = False
                                create_response(session_states[CONST_USERSTORY_OPTION], session_states[ADO_US_FEATURE_DETAILS_KEY].get('Title'), session_states, 0)
                                analytics = Analytics(default_path, session_states.username)
                                analytics.write_analytics(CONST_User_Story, session_states[CONST_USERSTORY_OPTION], "ADO-Parent-Create", session_states[CONST_ENTER_ORG_NAME], session_states[CONST_SEL_PROJECT], session_states[CONST_SEL_SITERATION])

                    if session_states[CONST_USERSTORY_OPTION] + 'data' in session_states:
                        session_states[session_states[CONST_USERSTORY_OPTION] + 'text'] = st.text_area(label=session_states[CONST_USERSTORY_OPTION], label_visibility="collapsed", height=700, value=session_states[session_states[CONST_USERSTORY_OPTION] + 'data'])

                        if session_states[CONST_USERSTORY_OPTION] + '_push_new_US_to_ADO' not in session_states:
                            session_states[session_states[CONST_USERSTORY_OPTION] + '_push_new_US_to_ADO'] = True

                        if session_states[session_states[CONST_USERSTORY_OPTION]] <= 2:
                            col1, col2 = st.columns(2)
                            with col1:
                                st.button('Recreate', key='UserStory_ADO_recreate', on_click=recreate_user_story_from_ado_feature, args=(session_states, default_path), help="Recreate the user story with the selected title")
                            push_ADO = None
                            with col2:
                                if session_states[session_states[CONST_USERSTORY_OPTION] + '_push_new_US_to_ADO']:
                                    push_ADO = st.button('Push to ADO', key='Push_US_to_ADO',on_click=push_us_to_ado,args=(session_states,))
                                    
                                else:
                                    st.warning("Push denied. Set template and/or example to None and recreate.")
                        
                            if push_ADO and 'US_ADO_push_successful' in session_states and session_states['US_ADO_push_successful']:
                                st.success(session_states['US_ADO_success_msg'])
                            session_states[session_states[CONST_USERSTORY_OPTION]] = 1

    except Exception as e:
        error_msg = handle_exception(e)
        st.toast(error_msg)
        if verify_log_variable(page, logger_object):
            logger.error(f"{page} {error_msg}")

def push_us_to_ado(session_states):
    page = session_states[CURRENT_UI_PAGE]
    logger_object = session_states[LOGGERCONFIG_OBJECT]
    default_path = session_states[CONST_DEFAULT_FOLDER]
    # with st.spinner("Updating " + page + ", please wait...."):
    status_code, msg, _ = create_new_ADOID(session_states[CONST_ENTER_ORG_NAME], session_states[CONST_SEL_PROJECT],session_states[CONST_SEL_STEAM],
                                            session_states[session_states[CONST_USERSTORY_OPTION] + 'text'], session_states, session_states[ADO_US_FEATURE_DETAILS_KEY].get('url'))
    if status_code ==200:
        #Made session_states['US_ADO_push_successful'] as True to show success message after pushing to ADO.
        session_states['US_ADO_push_successful'] = True
        fetch_us_child_items_after_ADO(session_states)
        
        session_states['US_ADO_success_msg'] = msg
        write_log(logger_object, page, f"User story {session_states[CONST_USERSTORY_OPTION]} created successfully in ADO.")
        analytics = Analytics(default_path, session_states.username)
        analytics.write_analytics(CONST_User_Story, session_states[CONST_USERSTORY_OPTION], "ADO-Parent-Push to ADO", session_states[CONST_ENTER_ORG_NAME], session_states[CONST_SEL_PROJECT], session_states[CONST_SEL_SITERATION])
    else:
        session_states['US_ADO_push_successful'] = False
        st.toast(msg)

# Function to refresh ADO features
def refresh_ado_features(logger_object, page, session_states):
    organization = session_states.get(CONST_ENTER_ORG_NAME)
    project = session_states.get(CONST_SEL_PROJECT)
    team = session_states.get(CONST_SEL_STEAM)

    if not (organization and project and team):
        st.toast("Please ensure organization, project, and team are set in settings page.")
        write_log(logger_object, page, "ADO settings are not set")
        return

    features = get_all_artifact_of_type(organization, project, team, session_states, 'Feature')
    write_log(logger_object, page, "Fetched features from ADO")

    if isinstance(features, str):  # Handle error messages
        st.toast(features)
        session_states[ADO_US_FEATURES_KEY] = []
        return

    session_states[ADO_US_FEATURES_KEY] = features

def write_log(logger_object, page, message):
    if verify_log_variable(page, logger_object):
        logger.info(f"{page} {message}")

# Function to recreate user story from ADO feature
def recreate_user_story_from_ado_feature(session_states, default_path):
    session_states[session_states[CONST_USERSTORY_OPTION]] = 2
    template = session_states[CONST_USERSTORY_USER_TEMPLATE]
    example=session_states[CONST_USERSTORY_USER_EXAMPLE]
    if(template == '' or template == 'None') and (example=='' or example=='None'):
        session_states[session_states[CONST_USERSTORY_OPTION]+'_push_new_US_to_ADO'] = True
    else:
        session_states[session_states[CONST_USERSTORY_OPTION]+'_push_new_US_to_ADO'] = False
    create_response(session_states[CONST_USERSTORY_OPTION], session_states[ADO_US_FEATURE_DETAILS_KEY].get('Title'), session_states, 1)
    analytics = Analytics(default_path, session_states.username)
    analytics.write_analytics(CONST_User_Story, session_states[CONST_USERSTORY_OPTION], "ADO-Parent-Recreate", session_states[CONST_ENTER_ORG_NAME], session_states[CONST_SEL_PROJECT], session_states[CONST_SEL_SITERATION])

#Function to return combined text of parent(Epic) and feature details.
def generate_text_from_details(parent_details, feature_details):
    """
    Generates a formatted text using parent (Epic) and feature details.

    Args:
        parent_details (dict): Dictionary containing parent (Epic) details.
        feature_details (dict): Dictionary containing feature details.

    Returns:
        str: A formatted string containing the details.
    """
    def format_details(details, label):
        """
        Helper function to format details for a given label.

        Args:
            details (dict): Dictionary containing details.
            label (str): Label for the section (e.g., "Epic", "Feature").

        Returns:
            str: Formatted string for the details.
        """
        if not details:
            return ""
        
        text = f"{label} Details:\n\n"
        for key, display_name in [
            ("Title", f"{label} Title"),
            ("Description", f"{label} Description"),
            ("AcceptanceCriteria", f"{label} Acceptance Criteria"),
            ("HowToDemo", f"{label} How to Demo"),
            ("AdditionalInfo", f"{label} Additional Info"),
        ]:
            value = details.get(key)
            if value and value not in ["No Description", "No Acceptance Criteria", "No How to Demo", "No Additional Info"]:
                text += f"{display_name}: {value}\n"
        text += "\n------\n\n"
        return text

    # Combine formatted details for parent (Epic) and feature
    text = format_details(parent_details, "Epic")
    text += format_details(feature_details, "Feature")
    return text

def recreate_userstory(session_states, page, Feature_title, default_path):
    session_states[us_save_button_key] = False
    with st.spinner("Recreating "+page+", please wait...."):
        session_states[session_states[CONST_USERSTORY_OPTION]]=2
        if(Feature_title!='Create new User Story'):
            create_response(session_states[CONST_USERSTORY_OPTION],Feature_title,session_states,1)                  
        else:
            create_response(session_states[CONST_USERSTORY_OPTION],'',session_states,1)

        analytics = Analytics(default_path, session_states.username)
        analytics.write_analytics(CONST_User_Story, session_states[CONST_USERSTORY_OPTION], "Recreate")

def recreate_userstory_ado(session_states, page, ADOisenabledgetdata, Feature_title, 
                      organization_name, project, team , 
                      toggle_button_desc, toggle_button_Accep, toggle_button_Demo, toggle_button_AddInfo, 
                      default_path):
    # if recreate:
    analytics = Analytics(default_path, session_states.username)
    analytics.write_analytics(CONST_User_Story, Feature_title, "ADO-Recreate", organization_name, project, team)
    with st.spinner("Recreating "+page+", please wait...."):
        session_states[session_states[CONST_USERSTORY_OPTION]]=2
        session_states["UserStoryRecreatedFlag"]=0
        ADOisenabledgetresponsedata = recreateADOresponse(ADOisenabledgetdata, Feature_title, session_states)

        if toggle_button_desc:
            st.session_state[f"Description_value"] = ADOisenabledgetresponsedata[CONST_DESC]
            session_states["Recreate_Description"] = True
        if toggle_button_Accep:
            st.session_state[f"Acceptance_Criteria_value"] = ADOisenabledgetresponsedata[CONST_ACCEPT]
            session_states["Recreate_Acceptance_Criteria"] = True
        if toggle_button_Demo:
            st.session_state[f"How_to_Demo_value"] = ADOisenabledgetresponsedata[CONST_DEMO]
            session_states["Recreate_How_to_Demo"] = True
        if toggle_button_AddInfo:
            st.session_state[f"Additional_Information_value"] = ADOisenabledgetresponsedata[CONST_ADDINFO]
            session_states["Recreate_Additional_Information"] = True